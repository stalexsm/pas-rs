name: Deploy

on:
  push:
    branches:
      - "main"

env:
  SQLX_OFFLINE: false
  DATABASE_URL: postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWD }}@${{ secrets.HOST }}:${{ secrets.DB_PORT }}/postgres

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Migrate database
        run: |
          cd backend
          cargo install sqlx-cli
          sqlx migrate run

      - name: Build
        run: |
          cd backend
          cargo build --release

      - name: SCP to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWD }}
          source: "target/release/backend"
          target: "/home/pas-rs"
          strip_components: 2

      - name: SSH into Server Run Backend
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWD }}
          script_stop: true
          script: |
            cd /home/pas-rs
            if [ -e PID.txt ]; then
              echo "Stopping existing process..."
              kill -9 $(cat PID.txt) || true
              rm PID.txt
            fi
            echo "Starting the Rust application..."
            ./backend & echo $! > PID.txt

            sleep 5

            if [ -e PID.txt ]; then
              echo "Rust application started successfully with PID: $(cat PID.txt)"
            else
              echo "Failed to start the Rust application. Check logs for errors."
            fi

  deploy-frontend:
    needs: deploy-backend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Add WASM Target
        run: |
          rustup target add wasm32-unknown-unknown

      - name: Install Trunk
        uses: jetli/trunk-action@v0.4.0
        with:
          version: "latest"

      - name: Build & Create Archive
        run: |
          cd frontend
          trunk build --release
          tar -zcvf deploy.tar.gz $(ls -d dist )

      - name: SCP to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWD }}
          source: "frontend/deploy.tar.gz"
          target: "/home/pas-rs"
          strip_components: 1

      - name: SSH into Server and Replace Source
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PASSWD }}
          script_stop: true
          script: |
            cd /home/pas-rs
            tar -xvf ./deploy.tar.gz -C .
            rm ./deploy.tar.gz
